import os
from langgraph.prebuilt import create_react_agent
from langchain.tools import Tool
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, AIMessage
import logging
from dotenv import load_dotenv

# Set up logging
logging.basicConfig(
    filename='calculator.log',
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Set up OpenAI API key
load_dotenv()

# Initialize the LLM (can be kept global as it's thread-safe)
llm = ChatOpenAI(api_key=os.getenv('OPENAI_API_KEY'), model='gpt-4')

# Define the calculator function
def calculator(input_expression: str) -> str:
    """Evaluates a mathematical expression."""
    try:
        # It's safer to use eval with limited globals and locals
        result = eval(input_expression, {"__builtins__": None}, {})
        return str(result)
    except Exception as e:
        return f"Error: {str(e)}"
    
calculator_tool = Tool.from_function(
    calculator,
    name="Calculator",
    description=(
        "Answer a math question based on the given query. "
    )
)
tools = [calculator_tool]
agent = create_react_agent(
        llm,
        tools=tools
    )

# Function to handle user queries
def calculator_agent(user_input):
    state = {"messages": [HumanMessage(content=user_input)]}
    try:
        response = agent.invoke(state)
        if 'messages' in response:
            # Find the latest AIMessage
            ai_messages = [msg for msg in response['messages'] if isinstance(msg, AIMessage)]
            if ai_messages:
                ai_response = ai_messages[-1].content
                logging.debug(f"Agent response: {ai_response}")
                return ai_response
            else:
                logging.warning("No AI response generated.")
                return "No AI response generated."
        else:
            logging.warning("No response generated by the agent.")
            return "No response generated."
    except Exception as e:
        logging.error(f"Agent invocation error: {e}")
        return "An error occurred while processing your request. Please try again later."